
/* this is coding for testing sending with simulated light sensor data. need to be added :
    1.Pin for led status
    2.remote adress for sending stat
    3.Send LED status
    4.Parse Input from gateway

    sending frame checked : OK
*/
#include <MsTimer2.h>
#include <XBee.h>
#include <math.h>

//////////CRC VARIABLE//////
uint16_t crcTable[256];
uint16_t poly=0x8005; //polynom based on CRC-16 Standard


//Xbee Object
XBee xbee = XBee();
// create reusable response objects for responses we expect to handle 
XBeeResponse response = XBeeResponse();
ZBRxResponse rx = ZBRxResponse();
ModemStatusResponse msr = ModemStatusResponse();
ZBTxStatusResponse txStatus = ZBTxStatusResponse();

///create payload for status delivery
//Gateway Adress
XBeeAddress64 GatewayAddr = XBeeAddress64(0x0013A200, 0x4092D859);
//packet payload
uint8_t commandPayload[25];
uint8_t CRCPayload[27];
//Transmit Packets
ZBTxRequest CRCPacket = ZBTxRequest(GatewayAddr, CRCPayload, sizeof(CRCPayload));
void setup() {
   
  Serial.begin(115200);
  xbee.setSerial(Serial);
  
}

int start;
int end;

void loop() {
    checkPacket();      //check incoming packet
}

//functions for sending and receiving packet
void checkPacket(){
    xbee.readPacket();
    if (xbee.getResponse().isAvailable()) {
        
        
        if (xbee.getResponse().getApiId() == ZB_RX_RESPONSE) {//get RX response
             //error band
             xbee.getResponse().getZBRxResponse(rx); 
             for(int i=0;i<25;++i){
                commandPayload[i]=rx.getData(i);
             }

             uint16_t crc = getCRC(commandPayload,25);
            //fill to new payload
            for(int i=0;i<25;++i){
                CRCPayload[i]=commandPayload[i];
             }
            CRCPayload[25]=getMSB(crc,16);
            CRCPayload[26]=getLSB(crc,16);

             CRCPacket = ZBTxRequest(GatewayAddr, CRCPayload, sizeof(CRCPayload));
            xbee.send(CRCPacket);
        } 
        else if (xbee.getResponse().getApiId() == ZB_TX_STATUS_RESPONSE) {
            xbee.getResponse().getZBTxStatusResponse(txStatus);

            // get the delivery status, the fifth byte
            if (txStatus.getDeliveryStatus() == SUCCESS) {
                // success.  time to celebrate
                
            } else {
                // the remote XBee did not receive our packet. is it powered on?
                //flashLed(statusLed, 3,500);
            }
        }
        else {
            // not something we were expecting
             
        }
    }
}

void crcTableInit(){
    uint16_t remain; //remainder variable
    for(int div = 0; div <256 ; ++div){ //divident index
        remain = div << 8;
        
        for(uint16_t bit = 0; bit<8; ++bit){
            uint16_t topbit = remain & (1<<15);
            remain <<= 1;
            if (topbit)
            {
                remain ^= poly;
            }
        }
        
        crcTable[div] = remain;
    }
}

uint16_t getCRC(uint8_t *payload, int length){
    uint8_t data;
    uint16_t remain = 0; //remainder initial value
    
    for(int byte=0; byte<length ;++byte){
        data = *payload++ ^ (remain >> 8);
        remain = crcTable[data] ^ (remain<<8);
        
    }
    
    return remain;
}

unsigned int getMSB(unsigned int value, int bitlength){
    bitlength=bitlength/2;
    unsigned int mask=getMask(bitlength);;
        unsigned int msb= (value>>bitlength);
        msb = msb & mask;
    return msb;
}
    
unsigned int getLSB(unsigned int value, int bitlength){
    bitlength=bitlength/2;
    unsigned int mask=getMask(bitlength);
        unsigned int lsb= value & mask;
    return lsb;
}
    
unsigned int getMask(int length){
    int num=0;
        int powval=0;
    for(int i=0;i<length;i++){
            powval=pangkat(2,i);
            num=num+powval;
    }
    return num;
}

int pangkat(int val, int expo){
  int hasil=val;
  if(expo<1){ hasil=1;}
  else if(expo<2){hasil=val;}
  else{
    for(int i=1;i<expo;i++){
      hasil=hasil*val;
    }
  }
  return hasil;
}
